<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hao&#39;s Blog</title>
    <link>https://blog.lifeishao.com/post/index.xml</link>
    <description>Recent content in Posts on Hao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io).</copyright>
    <lastBuildDate>Tue, 21 Mar 2017 17:02:21 -0500</lastBuildDate>
    <atom:link href="https://blog.lifeishao.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Serving Static Assets in Restify</title>
      <link>https://blog.lifeishao.com/2017/03/21/serving-static-assets-in-restify</link>
      <pubDate>Tue, 21 Mar 2017 17:02:21 -0500</pubDate>
      
      <guid>https://blog.lifeishao.com/2017/03/21/serving-static-assets-in-restify</guid>
      <description>

&lt;h1 id=&#34;serving-static-assets-in-restify-nodejs&#34;&gt;Serving Static Assets in Restify NodeJS&lt;/h1&gt;

&lt;p&gt;While Restify is branded as a REST Framework, there are instances where we want to put a static html along with the API.  For example, if we want to serve up the API documentation or built a Bot and serve up an UI.&lt;/p&gt;

&lt;h2 id=&#34;four-lines-of-code&#34;&gt;Four lines of Code&lt;/h2&gt;

&lt;p&gt;If you are looking to serve up static assets from in the root path, and all your assets are in the &lt;code&gt;public&lt;/code&gt; directory, these are the four lines of code you need.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.get(/\/?.*/, restify.serveStatic({
  directory: &#39;./public&#39;,
  default: &#39;index.html&#39;
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important note is you&amp;rsquo;ll need to &lt;strong&gt;put this code snippet as the very last route registration in your app&lt;/strong&gt;, otherwise every single GET request will try to serve the asset request (For example, &lt;code&gt;/api/messages&lt;/code&gt; will cause restify to look for &lt;code&gt;index.html&lt;/code&gt; under &lt;code&gt;public/api/messages/&lt;/code&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gre Math Formulas</title>
      <link>https://blog.lifeishao.com/2016/07/30/gre-math-formulas</link>
      <pubDate>Sat, 30 Jul 2016 13:40:15 -0500</pubDate>
      
      <guid>https://blog.lifeishao.com/2016/07/30/gre-math-formulas</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m making this for someone I care about.&lt;/p&gt;

&lt;h2 id=&#34;fractions&#34;&gt;Fractions&lt;/h2&gt;

&lt;p&gt;$ a/b * x/y = (a*x) / (b*y) $&lt;/p&gt;

&lt;p&gt;$ a/(b/c) = (a*c) / b $&lt;/p&gt;

&lt;p&gt;$ (a/b)/c = a/(b*c) $&lt;/p&gt;

&lt;p&gt;$ 1/(1/y) = y $&lt;/p&gt;

&lt;p&gt;$ 1/(a/b) = b/a $&lt;/p&gt;

&lt;h2 id=&#34;factors&#34;&gt;Factors&lt;/h2&gt;

&lt;p&gt;$ (a + b) (a - b) = a^2 - b^2 $&lt;/p&gt;

&lt;h2 id=&#34;fractals&#34;&gt;Fractals&lt;/h2&gt;

&lt;p&gt;$ a^b * a^c = a^(b+c) $&lt;/p&gt;

&lt;p&gt;$ (a^b)^x = a^(b*x) $&lt;/p&gt;

&lt;p&gt;$ a^0 = 1 $ (when $ a != 0 $)&lt;/p&gt;

&lt;p&gt;$ (a^b)/(a^c) = a^(b-c) $&lt;/p&gt;

&lt;p&gt;$ a^-b = 1/a^b $&lt;/p&gt;

&lt;p&gt;$ (ab)^x = a^x*b^x $&lt;/p&gt;

&lt;p&gt;$ (x / y) ^ a = x^a/y^a $&lt;/p&gt;

&lt;h2 id=&#34;inequalities&#34;&gt;Inequalities&lt;/h2&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;memorize&#34;&gt;Memorize:&lt;/h4&gt;

&lt;p&gt;$ x &amp;gt; y $&lt;br /&gt;
⬇️&lt;br /&gt;
$ a*x &amp;gt; a*y $&lt;br /&gt;
⬇️&lt;br /&gt;
$ -b*x &amp;lt; -b*y $&lt;/p&gt;

&lt;p&gt;When you multiply or divide by a &lt;strong&gt;negative&lt;/strong&gt; number, you have to &lt;strong&gt;flip the sign&lt;/strong&gt;.  This is because basically when you are adding or subtracting the same number, you are moving both sides in the same direction.  When you are multiplying or dividing both sides by a positive number, you are magnifying/reducing both sides.  But when you magnify/reduce by a negative number, you are moving the direction the opposite direction.&lt;/p&gt;

&lt;h2 id=&#34;geometry&#34;&gt;Geometry&lt;/h2&gt;

&lt;h3 id=&#34;trapezoid&#34;&gt;Trapezoid&lt;/h3&gt;

&lt;p&gt;A trapezoid has four sides, and at least a set of opposing sides needs to be &lt;strong&gt;parallel&lt;/strong&gt;.  It&amp;rsquo;s also possible that both sets of opposing sides are parallel, it&amp;rsquo;s called a &lt;strong&gt;parallelogram&lt;/strong&gt;.  Yes, rectangles and squares are also considered to be trapezoids (and parallelograms).&lt;/p&gt;

&lt;iframe
  style=&#34;width: 100%; height: auto;&#34; frameBorder=&#34;0&#34; allowfullscreen=&#34;allowfullscreen&#34;
  src=&#34;https://jsfiddle.net/howlowck/8e8u4nau/embedded/result/&#34;&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;


&lt;h4 id=&#34;area&#34;&gt;Area:&lt;/h4&gt;

&lt;p&gt;$ A = h*(a+b)/2 $&lt;/p&gt;

&lt;h4 id=&#34;parameter&#34;&gt;Parameter:&lt;/h4&gt;

&lt;p&gt;$ P = a+b+x+y $&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Power of Transformers (not these robots ↑)</title>
      <link>https://blog.lifeishao.com/2016/01/05/power-of-transformers</link>
      <pubDate>Tue, 05 Jan 2016 14:51:45 -0600</pubDate>
      
      <guid>https://blog.lifeishao.com/2016/01/05/power-of-transformers</guid>
      <description>

&lt;p&gt;About a year ago, I was tasked to write an API for a mobile application for the Dean of Students office.  While the main functionalities were finalized, the app&amp;rsquo;s development was still in its infancy.  This means that the API&amp;rsquo;s output and how it would be best-suited for the app&amp;rsquo;s consumption was still very much undefined.&lt;/p&gt;

&lt;p&gt;We had to use transformers to separate the API&amp;rsquo;s logic layer from its presentation.&lt;/p&gt;

&lt;p&gt;We used a PHP package called &lt;a href=&#34;http://fractal.thephpleague.com/&#34;&gt;Fractal&lt;/a&gt; to create our API presentation layer.&lt;/p&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The Code&lt;/h2&gt;

&lt;p&gt;Setting up the code to use our transformer is pretty straight forward:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;...
protected function getResourceArray(NotifyDTO $dto) {
    $fractal = new Manager();
    $fractal-&amp;gt;setSerializer(new BareArraySerializer());
    // using the transformer to create a new fractal item
    $resource = new Item($dto, new NotifyResourceTransformer);
    return $fractal-&amp;gt;createData($resource)-&amp;gt;toArray();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the transformer itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;class NotifyResourceTransformer extends Fractal\TransformerAbstract {
...

  public function transform(NotifyDTO $notify) {
    return [
      &#39;id&#39; =&amp;gt; (int) $notify-&amp;gt;id,
      &#39;updated_at&#39; =&amp;gt; $notify-&amp;gt;updatedAt-&amp;gt;toRfc2822String(),
      &#39;created_at&#39; =&amp;gt; $notify-&amp;gt;createdAt-&amp;gt;toRfc2822String(),
      &#39;client_datetime_utc&#39; =&amp;gt; $notify-&amp;gt;clientDt-&amp;gt;toRfc2822String(),
      &#39;client_timestamp&#39; =&amp;gt; $notify-&amp;gt;clientDt-&amp;gt;timestamp,
      &#39;server_datetime_utc&#39; =&amp;gt; $notify-&amp;gt;createdAt-&amp;gt;toRfc2822String(),
      &#39;token&#39; =&amp;gt; $notify-&amp;gt;token,
      &#39;origin_lat&#39; =&amp;gt; $notify-&amp;gt;originLatLong-&amp;gt;getLat(),
      &#39;origin_long&#39; =&amp;gt; $notify-&amp;gt;originLatLong-&amp;gt;getLong(),
      &#39;destination_lat&#39; =&amp;gt; $notify-&amp;gt;destinationLatLong-&amp;gt;getLat(),
      &#39;destination_long&#39; =&amp;gt; $notify-&amp;gt;destinationLatLong-&amp;gt;getLong(),
      &#39;countdown_duration&#39; =&amp;gt; $notify-&amp;gt;countdownSeconds,
      &#39;expired_server_timestamp&#39; =&amp;gt; $notify-&amp;gt;expiredAt-&amp;gt;timestamp,
      &#39;remaining_time&#39; =&amp;gt; $this-&amp;gt;calcTimeRemaining($notify-&amp;gt;expiredAt-&amp;gt;timestamp),
      &#39;contact_name&#39; =&amp;gt; $notify-&amp;gt;contactName,
      &#39;contact_phone&#39; =&amp;gt; (string) $notify-&amp;gt;contactPhone,
      &#39;battery&#39; =&amp;gt; $notify-&amp;gt;battery,
      &#39;message&#39; =&amp;gt; $notify-&amp;gt;message,
      &#39;return_netid&#39; =&amp;gt; $notify-&amp;gt;returnNetid,
      &#39;initiated_at&#39; =&amp;gt; is_null($notify-&amp;gt;initiatedAt)
                         ? null: $notify-&amp;gt;initiatedAt-&amp;gt;toRfc2822String(),
      &#39;notified_at&#39; =&amp;gt; is_null($notify-&amp;gt;notifiedAt)
                        ? null: $notify-&amp;gt;notifiedAt-&amp;gt;toRfc2822String(),
      &#39;canceled_at&#39;=&amp;gt; is_null($notify-&amp;gt;canceledAt)
                       ? null: $notify-&amp;gt;canceledAt-&amp;gt;toRfc2822String(),
      &#39;latest_location_id&#39; =&amp;gt; $notify-&amp;gt;latestLocationId,
		];
	}
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fractal passes the Data Transfer Object (DTO) to the transformer to create an item.  This item is able to be outputted as various formats, ie XML, json, array, etc.&lt;/p&gt;

&lt;p&gt;Enabling a transformer to transform an unchangeable data structure to an ever-changing output format proved to be invaluable for us.  When my colleague wanted the date format to change, it was literally one line of change without me worrying if other parts of my API application was needing the older format.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Card Validate</title>
      <link>https://blog.lifeishao.com/2016/01/05/thoughts-on-card-validate</link>
      <pubDate>Tue, 05 Jan 2016 13:57:34 -0600</pubDate>
      
      <guid>https://blog.lifeishao.com/2016/01/05/thoughts-on-card-validate</guid>
      <description>

&lt;p&gt;I was looking at &lt;a href=&#34;https://www.npmjs.com/package/card-validate&#34;&gt;a small package&lt;/a&gt; that I wrote a few years ago, and I think it&amp;rsquo;s a good mental exercise to reevaluate my own code once in a while.&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;The purpose of the package is to quickly check for the type of credit card given a small sample (say as a user is typing).  Also validate the credit card again the Luhn algorithm which is the algorithm used by most CC companies.&lt;/p&gt;

&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;

&lt;p&gt;I separated the CardVal object and the Card Class into two separate files, respectively: &lt;a href=&#34;https://github.com/howlowck/card-validate/blob/master/public/js/main.js&#34;&gt;main.js&lt;/a&gt;, and &lt;a href=&#34;https://github.com/howlowck/card-validate/blob/master/public/js/Card.js&#34;&gt;Card.js&lt;/a&gt;.  Main.js also acts as the initialization file.&lt;/p&gt;

&lt;h2 id=&#34;what-i-could-have-done-differently-now&#34;&gt;What I could have done differently now&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/howlowck/card-validate/blob/master/public/js/main.js#L66&#34;&gt;CardVal object&lt;/a&gt; is a simple object.  This made sense when I was first writing the package, because the object acts as a simple singleton.  However, this inhibits the user from modifying various aspects of the CardVal.  For example, if the user&amp;rsquo;s website only accepts Visa, Discover, and Amex, and does not care about the other, there isn&amp;rsquo;t an elegant way to do so (unless overwriting the cards property).&lt;/p&gt;

&lt;p&gt;Now I would write the CardVal as a factory method instead of a simple object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function detectTypesFunc(cardNum) {
    ...
}

function validateNumberFunc(cardNum) {
    ...
}

function validationOutputFunc(card) {
    ...
}

var CardValClass = function (options) {
    this.cards = options.cards;
}

CardValClass.prototype.detectType = detectTypesFunc;
CardValClass.prototype.validateNumber = validateNumberFunc;
CardValClass.prototype.validationOutput = validationOutputFunc;

function getCard(cardName) {
  var cardDictionary = {
    visa: visa,
    master: master,
    ...
  }
  return cardDictionary[cardName];
}

// CardVal is now a factory method for instantiating a CardValClass

var CardVal = function (options) {
  options = options || {};

  // Set the default value
  var cardsList = options.cards ||
  [&#39;visa&#39;, &#39;discover&#39;, &#39;jcb&#39;, &#39;amex&#39;, &#39;master&#39;, &#39;diners&#39;, &#39;diners-us&#39;];
  var cards = [];
  options.cards.forEach(function (cardName) {
    cards.push(getCard(cardName));
  });
  return new CardValClass({cards: cards});
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this allows the user to input options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CardVal = require(&#39;card-validate&#39;)({cards: [&#39;visa&#39;, &#39;master&#39;]});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Delivering Hugo with Dokku (and Docker)</title>
      <link>https://blog.lifeishao.com/2015/12/03/delivering-hugo</link>
      <pubDate>Thu, 03 Dec 2015 13:50:55 -0600</pubDate>
      
      <guid>https://blog.lifeishao.com/2015/12/03/delivering-hugo</guid>
      <description>&lt;p&gt;I&amp;rsquo;m trying to learn how to use dokku to deploy this hugo site.
&amp;hellip; and it&amp;rsquo;s deployed now!!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>