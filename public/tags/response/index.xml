<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Response on Hao&#39;s Blog</title>
    <link>https://blog.lifeishao.com/tags/response/</link>
    <description>Recent content in Response on Hao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2016</copyright>
    <lastBuildDate>Tue, 05 Jan 2016 14:51:45 -0600</lastBuildDate>
    <atom:link href="https://blog.lifeishao.com/tags/response/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Power of Transformers (not these robots â†‘)</title>
      <link>https://blog.lifeishao.com/power-of-transformers/</link>
      <pubDate>Tue, 05 Jan 2016 14:51:45 -0600</pubDate>
      
      <guid>https://blog.lifeishao.com/power-of-transformers/</guid>
      <description>

&lt;p&gt;About a year ago, I was tasked to write an API for a mobile application for the Dean of Students office.  While the main functionalities were finalized, the app&amp;rsquo;s development was still in its infancy.  This means that the API&amp;rsquo;s output and how it would be best-suited for the app&amp;rsquo;s consumption was still very much undefined.&lt;/p&gt;

&lt;p&gt;We had to use transformers to separate the API&amp;rsquo;s logic layer from its presentation.&lt;/p&gt;

&lt;p&gt;We used a PHP package called &lt;a href=&#34;http://fractal.thephpleague.com/&#34;&gt;Fractal&lt;/a&gt; to create our API presentation layer.&lt;/p&gt;

&lt;h2 id=&#34;the-code:5d25457a55cef1dc6bf4b4a7e05ab45a&#34;&gt;The Code&lt;/h2&gt;

&lt;p&gt;Setting up the code to use our transformer is pretty straight forward:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;...
protected function getResourceArray(NotifyDTO $dto) {
    $fractal = new Manager();
    $fractal-&amp;gt;setSerializer(new BareArraySerializer());
    // using the transformer to create a new fractal item
    $resource = new Item($dto, new NotifyResourceTransformer);
    return $fractal-&amp;gt;createData($resource)-&amp;gt;toArray();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the transformer itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;class NotifyResourceTransformer extends Fractal\TransformerAbstract {
...

  public function transform(NotifyDTO $notify) {
    return [
      &#39;id&#39; =&amp;gt; (int) $notify-&amp;gt;id,
      &#39;updated_at&#39; =&amp;gt; $notify-&amp;gt;updatedAt-&amp;gt;toRfc2822String(),
      &#39;created_at&#39; =&amp;gt; $notify-&amp;gt;createdAt-&amp;gt;toRfc2822String(),
      &#39;client_datetime_utc&#39; =&amp;gt; $notify-&amp;gt;clientDt-&amp;gt;toRfc2822String(),
      &#39;client_timestamp&#39; =&amp;gt; $notify-&amp;gt;clientDt-&amp;gt;timestamp,
      &#39;server_datetime_utc&#39; =&amp;gt; $notify-&amp;gt;createdAt-&amp;gt;toRfc2822String(),
      &#39;token&#39; =&amp;gt; $notify-&amp;gt;token,
      &#39;origin_lat&#39; =&amp;gt; $notify-&amp;gt;originLatLong-&amp;gt;getLat(),
      &#39;origin_long&#39; =&amp;gt; $notify-&amp;gt;originLatLong-&amp;gt;getLong(),
      &#39;destination_lat&#39; =&amp;gt; $notify-&amp;gt;destinationLatLong-&amp;gt;getLat(),
      &#39;destination_long&#39; =&amp;gt; $notify-&amp;gt;destinationLatLong-&amp;gt;getLong(),
      &#39;countdown_duration&#39; =&amp;gt; $notify-&amp;gt;countdownSeconds,
      &#39;expired_server_timestamp&#39; =&amp;gt; $notify-&amp;gt;expiredAt-&amp;gt;timestamp,
      &#39;remaining_time&#39; =&amp;gt; $this-&amp;gt;calcTimeRemaining($notify-&amp;gt;expiredAt-&amp;gt;timestamp),
      &#39;contact_name&#39; =&amp;gt; $notify-&amp;gt;contactName,
      &#39;contact_phone&#39; =&amp;gt; (string) $notify-&amp;gt;contactPhone,
      &#39;battery&#39; =&amp;gt; $notify-&amp;gt;battery,
      &#39;message&#39; =&amp;gt; $notify-&amp;gt;message,
      &#39;return_netid&#39; =&amp;gt; $notify-&amp;gt;returnNetid,
      &#39;initiated_at&#39; =&amp;gt; is_null($notify-&amp;gt;initiatedAt)
                         ? null: $notify-&amp;gt;initiatedAt-&amp;gt;toRfc2822String(),
      &#39;notified_at&#39; =&amp;gt; is_null($notify-&amp;gt;notifiedAt)
                        ? null: $notify-&amp;gt;notifiedAt-&amp;gt;toRfc2822String(),
      &#39;canceled_at&#39;=&amp;gt; is_null($notify-&amp;gt;canceledAt)
                       ? null: $notify-&amp;gt;canceledAt-&amp;gt;toRfc2822String(),
      &#39;latest_location_id&#39; =&amp;gt; $notify-&amp;gt;latestLocationId,
		];
	}
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fractal passes the Data Transfer Object (DTO) to the transformer to create an item.  This item is able to be outputted as various formats, ie XML, json, array, etc.&lt;/p&gt;

&lt;p&gt;Enabling a transformer to transform an unchangeable data structure to an ever-changing output format proved to be invaluable for us.  When my colleague wanted the date format to change, it was literally one line of change without me worrying if other parts of my API application was needing the older format.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Card Validate</title>
      <link>https://blog.lifeishao.com/thoughts-on-card-validate/</link>
      <pubDate>Tue, 05 Jan 2016 13:57:34 -0600</pubDate>
      
      <guid>https://blog.lifeishao.com/thoughts-on-card-validate/</guid>
      <description>

&lt;p&gt;I was looking at &lt;a href=&#34;https://www.npmjs.com/package/card-validate&#34;&gt;a small package&lt;/a&gt; that I wrote a few years ago, and I think it&amp;rsquo;s a good mental exercise to reevaluate my own code once in a while.&lt;/p&gt;

&lt;h2 id=&#34;background:8cb4ae0fcc3fdc7943718cd240ce8227&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;The purpose of the package is to quickly check for the type of credit card given a small sample (say as a user is typing).  Also validate the credit card again the Luhn algorithm which is the algorithm used by most CC companies.&lt;/p&gt;

&lt;h2 id=&#34;structure:8cb4ae0fcc3fdc7943718cd240ce8227&#34;&gt;Structure&lt;/h2&gt;

&lt;p&gt;I separated the CardVal object and the Card Class into two separate files, respectively: &lt;a href=&#34;https://github.com/howlowck/card-validate/blob/master/public/js/main.js&#34;&gt;main.js&lt;/a&gt;, and &lt;a href=&#34;https://github.com/howlowck/card-validate/blob/master/public/js/Card.js&#34;&gt;Card.js&lt;/a&gt;.  Main.js also acts as the initialization file.&lt;/p&gt;

&lt;h2 id=&#34;what-i-could-have-done-differently-now:8cb4ae0fcc3fdc7943718cd240ce8227&#34;&gt;What I could have done differently now&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/howlowck/card-validate/blob/master/public/js/main.js#L66&#34;&gt;CardVal object&lt;/a&gt; is a simple object.  This made sense when I was first writing the package, because the object acts as a simple singleton.  However, this inhibits the user from modifying various aspects of the CardVal.  For example, if the user&amp;rsquo;s website only accepts Visa, Discover, and Amex, and does not care about the other, there isn&amp;rsquo;t an elegant way to do so (unless overwriting the cards property).&lt;/p&gt;

&lt;p&gt;Now I would write the CardVal as a factory method instead of a simple object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function detectTypesFunc(cardNum) {
    ...
}

function validateNumberFunc(cardNum) {
    ...
}

function validationOutputFunc(card) {
    ...
}

var CardValClass = function (options) {
    this.cards = options.cards;
}

CardValClass.prototype.detectType = detectTypesFunc;
CardValClass.prototype.validateNumber = validateNumberFunc;
CardValClass.prototype.validationOutput = validationOutputFunc;

function getCard(cardName) {
  var cardDictionary = {
    visa: visa,
    master: master,
    ...
  }
  return cardDictionary[cardName];
}

// CardVal is now a factory method for instantiating a CardValClass

var CardVal = function (options) {
  options = options || {};

  // Set the default value
  var cardsList = options.cards ||
  [&#39;visa&#39;, &#39;discover&#39;, &#39;jcb&#39;, &#39;amex&#39;, &#39;master&#39;, &#39;diners&#39;, &#39;diners-us&#39;];
  var cards = [];
  options.cards.forEach(function (cardName) {
    cards.push(getCard(cardName));
  });
  return new CardValClass({cards: cards});
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this allows the user to input options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CardVal = require(&#39;card-validate&#39;)({cards: [&#39;visa&#39;, &#39;master&#39;]});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>